#Title: sort_pix.py
#Author: William Byrne
#Date: 6/20/21

#Description  - Copys IP_ and IS_(prefix) .tiff files into new 
#"sorted" folder and sorts them by year. Then groups them by grouping of prefix. 

"""internship_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lVEl9T88wmnhx4XgYRzxtFV4MUqmqUds
"""

import os
import shutil
import collections

# ONlY EDIT THINGS IN BETWEEN THESE LINES -----------------------------------

path = "C:/Users/wbyrne/Desktop/rawdata - local/"

#Example: x383
pic_path = "x117"


#BEFORE RUNNIGN THIS SCRIPT, CHECK FOR A SENTINAL PREFIX IN THE CHOSEN FOLDER
#Example: Want to sort x383.    X383 has one Sentenal Prefix - IS_NKJ_
sent_prefix = "IS_MPA_"        # MUST CONTAIN A _ AT END


#ONLY EDIT THINGS IN BETWEEN THESE LINES ------------------------------------


path += pic_path +"/"
names = os.listdir(path)
newNames = list()


#In case you run multiple times, remove sorted form list
#add if stamement to remove "sorted" name from file name list


#Make a list of files WITHOUT prefix
for name in names:
  if name.find("IP") != -1:
    newName = name.replace("IP_", "")
    index = names.index(name)
    newNames.insert(index,newName)
  if name.find("IS") != -1:
    newName = name.replace(sent_prefix, "")
    index = names.index(name)
    newNames.insert(index,newName)

#sort the prefix-less list
newNames = sorted(newNames)

#Go through full file name list and prefix-less list 
#and add prefix's to prefix-less file names
for origi_name in names:
  for new_name in newNames:
    if origi_name.find(new_name) != -1 and origi_name.find("IP_") != -1:
      prefix_new_name = "IP_"+new_name
      newNames.insert(newNames.index(new_name), prefix_new_name)
      newNames.remove(new_name)
    if origi_name.find(new_name) != -1 and origi_name.find(sent_prefix) != -1:
      prefix_new_name = sent_prefix+new_name
      newNames.insert(newNames.index(new_name), prefix_new_name)
      newNames.remove(new_name)

#Make a sorted folder
if not os.path.exists(path+"sorted/"):
  os.makedirs(path+"sorted/")



counter = 1

file_dict = collections.defaultdict()

#place sorted files in dictionary with grouping
#Example: {group1: [IP_20180112.tiff], group2: [IS_NJK_20180123.tiff, IS_NJK_20180127.tiff]}
#Suggestion - Sort dictionary
for file_name in newNames:
  if newNames.index(file_name) == 0:
    file_dict["group"+str(counter)] = []
    file_dict["group"+str(counter)].append(file_name)
  elif file_name.find("IS") != -1 and newNames[newNames.index(file_name)-1].find("IS") != -1:
    file_dict["group"+str(counter)].append(file_name)
  elif file_name.find("IP") != -1 and newNames[newNames.index(file_name)-1].find("IP") != -1:
    file_dict["group"+str(counter)].append(file_name)
  
  elif file_name[:2] != newNames[newNames.index(file_name)-1][:2]:
    counter += 1
    file_dict["group"+str(counter)] = []
    file_dict["group"+str(counter)].append(file_name)


for key in file_dict.keys():
  os.makedirs(path+"sorted/"+key)
  for file in file_dict[key]:
    shutil.copy(path+file, path+"sorted/"+key+"/"+file)