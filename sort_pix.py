#Title: sort_pix.py
#Author: William Byrne
#Date: 6/20/21

#Description  - Copys IP_ and IS_(prefix) .tiff files into new 
#"sorted" folder and sorts them by year. Then groups them by grouping of prefix. 

"""internship_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lVEl9T88wmnhx4XgYRzxtFV4MUqmqUds
"""

import os
import shutil
import collections

# ONlY EDIT THINGS IN BETWEEN THESE LINES -----------------------------------
#Example: x383
pic_path = "x115"


#ONLY EDIT THINGS IN BETWEEN THESE LINES ------------------------------------

sen_prefix = ""         
path = os.getcwd()+"\\"
path += pic_path +"/"
names = os.listdir(path)
newNames = list()


#In case you run multiple times, remove sorted form list
#add if stamement to remove "sorted" name from file name list




#Get rid of all non sen_prefix sentinal files
#sets sen_prefix equal to first available sentinel file prefix
for name in names[:]:
  if name.find("IS") != -1 and sen_prefix == "":
    temp_list = name.split("2")
    sen_prefix = temp_list[0]
	
  if (name.find("IP") == -1) and (name.find(sen_prefix) == -1):
    names.remove(name)


x = 0

#Make a list of files WITHOUT prefix
for name in names:
  if name.find("IP") != -1:
    newName = name.replace("IP_", "")
    index = names.index(name)
    newNames.insert(index,newName)
  if name.find("IS") != -1:
    newName = name.replace(sen_prefix, "")
    index = names.index(name)
    newNames.insert(index,newName)
	

#sort the prefix-less list
newNames = sorted(list(set(newNames)))

#Go through full file name list and prefix-less list 
#and add prefix's to prefix-less file names
for origi_name in names:
  for new_name in newNames:
    if origi_name.find(new_name) != -1 and origi_name.find("IP_") != -1:
      prefix_new_name = "IP_"+new_name
      newNames.insert(newNames.index(new_name), prefix_new_name)
      newNames.remove(new_name)
    if origi_name.find(new_name) != -1 and origi_name.find(sen_prefix) != -1:
      prefix_new_name = sen_prefix+new_name
      newNames.insert(newNames.index(new_name), prefix_new_name)
      newNames.remove(new_name)

#Make a folder called sorted
if not os.path.exists(path+"sorted/"):
  os.makedirs(path+"sorted/")



group_num = 0
start_date = ""

file_dict = collections.defaultdict()

#place sorted files in dictionary with grouping
#Example: {group1: [IP_20180112.tiff], group2: [IS_NJK_20180123.tiff, IS_NJK_20180127.tiff]}
#Suggestion - Sort dictionary
for file_name in newNames:
  current_pre = file_name[:2]
  if current_pre == "IP":
	current_pre = "Planet"
  else:
	current_pre = "Sentenal"
  if (newNames.index(file_name) == 0) or (file_name[:2] != newNames[newNames.index(file_name)-1][:2]):
    group_num += 1
    #make a start_date string that tells you the youngest file in the group
    if (start_date+" ("+str(group_num)+")"+" - "+current_pre not in file_dict.keys()) or (len(file_dict["group"+str(group_num) +start_date]) == 0):
	  start_date = ""
	  temp_list = []
	  temp_list = file_name.split("2",1)
	  start_date = "2"+temp_list[1]
	  start_date = " "+start_date[0:4] + " " + start_date[4:6]
    file_dict[start_date+" ("+str(group_num)+")"+" - "+current_pre] = []
    file_dict[start_date+" ("+str(group_num)+")"+" - "+current_pre].append(file_name)
  elif (file_name.find("IS") != -1 and newNames[newNames.index(file_name)-1].find("IS") != -1) or (file_name.find("IP") != -1 and newNames[newNames.index(file_name)-1].find("IP") != -1):
    file_dict[start_date+" ("+str(group_num)+")"+" - "+current_pre].append(file_name)
  


for key in file_dict.keys():
  os.makedirs(path+"sorted/"+key)
  for file in file_dict[key]:
    shutil.copy(path+file, path+"sorted/"+key+"/"+file)
